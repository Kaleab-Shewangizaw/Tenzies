{"ast":null,"code":"var _jsxFileName = \"/home/kalab/Documents/Documents/Scrimba-react/04/src/App.jsx\",\n  _s = $RefreshSig$();\nimport Dice from \"./components/Dice\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  function generateAllNewDice() {\n    // const newDice = []\n    // for(let i = 0; i < 10; i++){\n    //     const randNum = Math.floor(Math.random() * 6)\n    //     newDice.push(randNum)\n    // }\n    // return newDice\n    // ----------------------------------------------------------------\n\n    return new Array(10).fill(0).map(() => ({\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid()\n    }));\n  }\n  const hold = id => {\n    setDice(dice.map(die => {\n      if (die.id === id) {\n        return {\n          ...die,\n          isHeld: !die.isHeld\n        };\n      } else {\n        return die;\n      }\n    }));\n  };\n  const [dice, setDice] = useState(generateAllNewDice());\n  const diceElement = dice.map((num, index) => /*#__PURE__*/_jsxDEV(Dice, {\n    value: num.value,\n    isHeld: num.isHeld,\n    hold: () => hold(num.id)\n  }, num.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this));\n  const rolldice = () => {\n    setDice(generateAllNewDice());\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: diceElement\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: rolldice,\n        children: \"Roll Dice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"SIuNhzIcrFRnWzVQ3fwYp4mDMrQ=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Dice","useState","nanoid","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","generateAllNewDice","Array","fill","map","value","Math","ceil","random","isHeld","id","hold","setDice","dice","die","diceElement","num","index","fileName","_jsxFileName","lineNumber","columnNumber","rolldice","children","className","onClick","_c","$RefreshReg$"],"sources":["/home/kalab/Documents/Documents/Scrimba-react/04/src/App.jsx"],"sourcesContent":["import Dice from \"./components/Dice\";\nimport { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nexport default function App() {\n  function generateAllNewDice() {\n    // const newDice = []\n    // for(let i = 0; i < 10; i++){\n    //     const randNum = Math.floor(Math.random() * 6)\n    //     newDice.push(randNum)\n    // }\n    // return newDice\n    // ----------------------------------------------------------------\n\n    return new Array(10).fill(0).map(() => ({\n      value: Math.ceil(Math.random() * 6),\n      isHeld: false,\n      id: nanoid(),\n    }));\n  }\n  const hold = (id) => {\n    setDice(\n      dice.map((die) => {\n        if (die.id === id) {\n          return { ...die, isHeld: !die.isHeld };\n        } else {\n          return die;\n        }\n      })\n    );\n  }\n\n  const [dice, setDice] = useState(generateAllNewDice());\n\n  const diceElement = dice.map((num, index) => (\n    <Dice \n    value={num.value} \n    isHeld={num.isHeld} \n    key={num.id} \n    hold = {() => hold(num.id)}/>\n  ));\n\n  const rolldice = () => {\n    setDice(generateAllNewDice());\n  };\n\n  return (\n    <>\n      <main>\n        <div className=\"container\">{diceElement}</div>\n\n        <button onClick={rolldice}>Roll Dice</button>\n      </main>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,mBAAmB;AACpC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAChC,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAC5B,SAASC,kBAAkBA,CAAA,EAAG;IAC5B;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,OAAO,IAAIC,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,OAAO;MACtCC,KAAK,EAAEC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;MACnCC,MAAM,EAAE,KAAK;MACbC,EAAE,EAAEhB,MAAM,CAAC;IACb,CAAC,CAAC,CAAC;EACL;EACA,MAAMiB,IAAI,GAAID,EAAE,IAAK;IACnBE,OAAO,CACLC,IAAI,CAACT,GAAG,CAAEU,GAAG,IAAK;MAChB,IAAIA,GAAG,CAACJ,EAAE,KAAKA,EAAE,EAAE;QACjB,OAAO;UAAE,GAAGI,GAAG;UAAEL,MAAM,EAAE,CAACK,GAAG,CAACL;QAAO,CAAC;MACxC,CAAC,MAAM;QACL,OAAOK,GAAG;MACZ;IACF,CAAC,CACH,CAAC;EACH,CAAC;EAED,MAAM,CAACD,IAAI,EAAED,OAAO,CAAC,GAAGnB,QAAQ,CAACQ,kBAAkB,CAAC,CAAC,CAAC;EAEtD,MAAMc,WAAW,GAAGF,IAAI,CAACT,GAAG,CAAC,CAACY,GAAG,EAAEC,KAAK,kBACtCrB,OAAA,CAACJ,IAAI;IACLa,KAAK,EAAEW,GAAG,CAACX,KAAM;IACjBI,MAAM,EAAEO,GAAG,CAACP,MAAO;IAEnBE,IAAI,EAAIA,CAAA,KAAMA,IAAI,CAACK,GAAG,CAACN,EAAE;EAAE,GADtBM,GAAG,CAACN,EAAE;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACiB,CAC7B,CAAC;EAEF,MAAMC,QAAQ,GAAGA,CAAA,KAAM;IACrBV,OAAO,CAACX,kBAAkB,CAAC,CAAC,CAAC;EAC/B,CAAC;EAED,oBACEL,OAAA,CAAAE,SAAA;IAAAyB,QAAA,eACE3B,OAAA;MAAA2B,QAAA,gBACE3B,OAAA;QAAK4B,SAAS,EAAC,WAAW;QAAAD,QAAA,EAAER;MAAW;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAE9CzB,OAAA;QAAQ6B,OAAO,EAAEH,QAAS;QAAAC,QAAA,EAAC;MAAS;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC;EAAC,gBACP,CAAC;AAEP;AAACrB,EAAA,CAnDuBD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAAA,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}